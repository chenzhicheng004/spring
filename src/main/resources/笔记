

spring3.x企业应用开发实战

第一章 spring概述

spring缔造者：rod johnson

spring是分层的javaee应用一站式的轻量级开源框架，以IoC和AOP为内核，提供了展现层springMVC和springJDBC以及业务层事务管理等众多的企业级应用技术

2004年发布spring第一个版本，并成立了springsource公司，2009年该公司被vmware收购

好的设计应优于具体实现，代码应易于测试

如果想在短时间内提升自己的java水平，学习和研究spring源码会有意想不到的效果

spring3新增了许多功能，可以了解一下


第二章

一个demo

第三章

IoC是spring的核心，和DI（依赖注入）等价

依赖注入的方式有三种：接口注入、构造方法注入、属性注入

spring容器通过java反射机制来实例化bean对象，然后创建bean之间的依赖关系。除此之外，还提供了缓存、生命周期管理、代理、事件发布、资源装载等高级服务

spring设计了一个Resource接口代表底层的资源，它有多个实现类（如：FileSystemResource、ClassPathResource等）。通过ResourceLoader接口可以方便的访问资源

BeanFactory是spring框架最核心的接口，而ApplicationContext则更多面向应用的功能

使用XmlBeanFactory来管理bean：
        ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();
        Resource resource = resolver.getResource("classpath:beans.xml");
        XmlBeanFactory fac = new XmlBeanFactory(resource);
        LoginLog log = fac.getBean("loginLog", LoginLog.class);

启动BeanFactory时，必须给他提供一种日志框架，如log4j

使用ApplicationContext来管理bean：
        ApplicationContext context = new ClassPathXmlApplicationContext("classpath:beans.xml");
        Object obj = context.getBean("loginLog");

WebApplicationContext是专门为web准备的，它允许从web根目录下装载配置文件完成初始化工作，它作为attribute放入到ServletContext中。
Spring专门提供了WebApplicationContextUtils来通过ServletContext获取WebApplicationContext

WebApplicationContext的启动需要ServletContext，在web.xml中可以指定ContextLoaderServlet或者ContextLoaderListener来启动。
通过contextConfigLocation参数来指定启动时的配置文件
启动时，还需要配置Log4jConfigServlet或者Log4jConfigListener来启动log4j框架，该框架需要配置log4jConfigLocation参数

controller bean位于父容器中，service bean和dao bean位于子容器中，controller bean可以访问到下层的bean，而下层的bean访问不到上层的bean

第四章

bean配置文件中，bean节点下的property节点的效果是调用相应的setter方法，并不一定需要bean中有对应的属性

注入null值：<property name=""><null/></property>

spring可以给bean注入list、set、map、properties集合属性

如果要注入spring不认识的类型（如日期等），可以用到属性编辑器类来将string类型转化成需要的类型，再配置一些即可

bean作用域：singleton、prototype、request、session、globalSession

FactoryBean：通过实现该接口，在配置文件中定义bean时class指定该接口的实现类可以生成指定的bean

通过注解来定义bean：
@Component   通用注解
@Repository  给DAO实现类注解
@Service     给Service实现类注解
@Controller  给Controller实现类注解

通过注解注入bean：
@Autowired       默认requied为true，如果允许为空，那么设置该值为false
@Qualifier("")   指定注入的bean的名称

通过注解指定bean的作用域：
@Scope


第五章

属性编辑器

国际化

事件


第六章

aop术语：
    连接点：程序执行的某个特定位置，类开始初始化时、方法调用前，spring只支持方法连接点
    切点：连接点是客观存在的，一个类中有多个，选择想要的连接点即是切点
    增强：枳入到目标类连接点的一段代码
    目标对象：目标类
    引介：特殊的增强，给目标类添加属性或者方法
    代理：增强后生成一个新的类，这个类就是目标类的代理
    切面：由切点和增强组成

aop的设计目标是把横切的问题（如性能监控、事务管理）模块化

aop实现：
    AspectJ
    AspectWerkz
    JBossAOP
    SpringAOP

Spring AOP是利用动态代理技术在程序运行期加入增强代码，动态代理包括两种：
    JDK动态代理：只能代理接口类，创建代理类快
    CGLib：可以代理非接口类，代理类的性能好

增强的类型：
    前置增强
    后置增强
    环绕增强
    抛出异常增强
    引介增强

切面：过滤增强的方法，而不是增强目标类所有的方法


第七章

注解

AspectJ


第八章

spring中可以使用不同的dao框架，并为它们提供了统一的异常体系

spring为数据访问提供了模板类，它是线程安全的，对于变化的部分则是以回调的方式解决。不同的持久化技术所使用的模板类是不同的。同时提供了支持类来简化编程

spring获取数据库连接的方式是通过数据源，数据源可以通过JNDI获取、配置文件配置、代码创建

创建数据库连接池时可以配置一些参数来控制其行为

数据库会关闭掉超过8小时的空闲连接，但是这样的连接在数据库连接池中可能未被关闭，这就会导致返回给程序的连接是无效的

数据库连接池：dbcp、c3p0等


第九章

事务特性：原子性、一致性、隔离性、持久性

事务隔离级别：读未提交、读已提交、可重复读、串行化

不同的数据库对于事务隔离级别的支持是不一样的

spring的模板类用ThreadLocal来实现并发环境的线程安全问题，而不是通过同步机制

在spring中一些有状态的bean可以在多线程的环境下以singleton的方式正常运行就是因为spring用ThreadLocal来实现线程安全的

对于不同的数据库，spring对事务采用统一的编程模型，只要通过配置文件即可配置事务。对于单数据源的应用，spring直接使用底层的数据库管理事务，而多数据源的，则用JTA来管理事务

spring给不同的持久化技术分别定义了不同的事务管理器类

事务传播行为：事务方法和事务方法发生嵌套时事务应该如何处理

在service层定义事务，定义事务的方式：
    编程式事务：使用spring提供的TransactionManager和TransactionCallback接口的实现类
    声明式事务：只需要在配置文件中声明一些bean即可，spring3引入了aop命名空间使得配置更加简单化
    注解式事务：在service层的类或者方法上使用Transactional注解即可


第十章

spring aop代理的方法是有限制的，只能是public方法，其他方法无法被代理，因此也就无法被定义事务（spring通过aop增强来提供事务能力）

spring获取数据库连接的方式：
    数据资源获取工具类
    数据源

使用spring提供的模板类来获取连接操作数据库，不会存在数据库连接泄露的问题


第十一章

如果无法使用ibatis、hebernate等持久化技术，那么可以选择使用spring提供的jdbc，它提供了jdbcTemplate可以简化jdbc的使用


第十二章

ibatis的第三个版本更名为myBatis


第十三章

Quartz是任务调度的开源框架，只要向框架提供时间点、执行什么任务这两个信息即可完成任务的调度

JDK Timer也可以提供任务调度的功能


第十四章

xml和java对象的映射技术（oxm）：
    XStream：还可以处理json对象
    JAXB
    XMLBeans
    Castor
    JiBX

spring整合了oxm框架，可以方便使用它们


第十五章

DispatcherServlet截获请求分发给相应的处理器处理，它负责协调和组织不同的组件完成请求处理并返回响应的工作

springMVC处理流程：
    客户端发送http请求
    DispatcherServlet截获请求，通过HandlerMapping分发给处理器
    处理器处理完成之后返回ModelAndView给DispatcherServlet
    DispatcherServlet根据其中的视图逻辑名，通过ViewResolver解析成真正的视图对象
    DispatcherServlet使用模型数据渲染视图对象
    将渲染之后的结果返回到客户端，客户端拿到的可能是http页面、xml、json串、图片、文件等

springMVC是基于Model2实现的框架

DispatcherServlet初始化后，就会自动扫描上下文的bean，根据名称或者类型的机制查找自定义组件，找不到则使用DispatcherServlet.properties定义的默认组件

请求信息包括：
    请求url
    请求参数
    请求方法
    请求头

RequestMapping指定路径时，可以模糊匹配，也可以使用占位符（如：“/{userId}”），在方法的参数前面加上@PathVariable（"userId"）即可获得该值

RequestMapping还可以通过请求的方法、请求头、请求参数来设置请求路径

可以在请求方法参数的前面加上@RequestParam参数来获得请求的参数，@CookieValue来获得cookie值，@RequestHeader来获得请求头的值。通过这些注解的required参数来设置是否必须

请求方法的参数可以直接是一个表单对象，spring会自动根据参数去给该对象赋值

请求方法的参数也可以是servlet api对象，如：
    HTTPServletRequest
    HttpServletResponse
    HttpSession

HttpMessageConverter接口是spring3新增的，它可以讲http请求转化为对象，将对象输出为响应信息，spring默认提供了多个实现类处理不同的数据格式

将处理器得到的模型数据传递到视图的方法：
    请求方法返回ModelAndView，将数据放入该对象中
    请求方法参数注解@ModelAttribute，参数会放入到model中，如果对请求方法使用该注解则会把请求方法的返回值放入model中
    @SessionAttribute可以将参数放入到session中，可以给类使用该注解
    请求方法参数是map类型或者model类型，将数据放入map或model中即可

springMVC通过反射机制对目标方法的签名进行解析，将请求数据绑定到处理方法的入参中，数据绑定的核心部件是DataBinder

数据绑定做的工作：
    数据转换：编写转换类，将它配置到spring即可
    数据格式化
    数据校验

常见的视图技术：
    JSP：InternalResourceViewResolver
    FreeMarker：FreeMarkerViewResolver
    Velocity

springMVC直接支持文件上传


第十六章

测试框架：
    JUnit
    Mockito
    Unitils
    Dbunit

JUnit测试用例完整生命周期：
    类级初始化资源
    方法级初始化资源
    执行测试方法
    销毁方法级资源
    销毁类级资源

 断言：预测结果和实际结果的比较
























































